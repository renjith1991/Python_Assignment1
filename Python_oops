Q1. What is the purpose of Python's OOP?

Ans: 
The purpose of Python's Object-Oriented Programming (OOP) is to provide a way to structure and organize code by grouping related data and behaviors into objects. 
OOP promotes the concepts of modularity, reusability, and encapsulation, allowing for more efficient and maintainable code.

Q2. Where does an inheritance search look for an attribute?

Ans: hen you access an attribute on an object, the inheritance search for an attribute in a class hierarchy, 
taking into account inheritance and the order of class definitions.

Q3. How do you distinguish between a class object and an instance object?

Ans: 
Class attributes are defined within the class object and are shared among all instances of the class
Instance objects are created using the class as a constructor, typically by calling the class as if it were a function


Q4. What makes the first argument in a classâ€™s method function special?

Ans: In Python, the first argument in a class's method function is conventionally named self.
This argument represents the instance of the class that the method is being called on.
It is a reference to the specific object through which the method is invoked.

Q5. What is the purpose of the init method?
Ans: 
The __init__ method, also known as the initializer or constructor, is a special method in Python classes. 
It is automatically called when an instance of a class is created. The purpose of the __init__ method is to initialize the attributes of 
an object with the values provided at the time of creation or to set up any necessary initial state of the object.

Q6. What is the process for creating a class instance?
Ans:
1. Define the Class: Begin by defining the class that represents the blueprint or template for the objects you want to create. 
The class definition specifies the attributes and methods that the instances will have.

2. Instantiate the Class: To create an instance of the class, you need to call the class as if it were a function, followed by parentheses.
This process is known as instantiation. When you instantiate a class, you create a unique object that is an instance of that class.

3. Assign the Instance to a Variable: Store the newly created instance in a variable.
This variable will be used to access and work with the instance's attributes and methods.


Q7. What is the process for creating a class?

Q8. How would you define the superclasses of a class?

Q9. What is the relationship between classes and modules?

Q10. How do you make instances and classes?

Q11. Where and how should be class attributes created?

Q12. Where and how are instance attributes created?

Q13. What does the term "self" in a Python class mean?

Q14. How does a Python class handle operator overloading?

Q15. When do you consider allowing operator overloading of your classes?

Q16. What is the most popular form of operator overloading?

Q17. What are the two most important concepts to grasp in order to comprehend Python OOP code?

Q18. Describe three applications for exception processing.

Q19. What happens if you don't do something extra to treat an exception?

Q20. What are your options for recovering from an exception in your script?

Q21. Describe two methods for triggering exceptions in your script.

Q22. Identify two methods for specifying actions to be executed at termination time, regardless of
whether or not an exception exists.

Q23. What is the purpose of the try statement?

Q24. What are the two most popular try statement variations?

Q25. What is the purpose of the raise statement?

Q26. What does the assert statement do, and what other statement is it like?

Q27. What is the purpose of the with/as argument, and what other statement is it like?

Q28. What are *args, **kwargs?

Q29. How can I pass optional or keyword parameters from one function to another?

Q30. What are Lambda Functions?

Q31. Explain Inheritance in Python with an example?

Q32. Suppose class C inherits from classes A and B as class C(A,B).Classes A and B both have their own versions of method func(). If we call func() from an object of class C, which version gets invoked?

Q33. Which methods/functions do we use to determine the type of instance and inheritance?

Q34.Explain the use of the 'nonlocal' keyword in Python.

Q35. What is the global keyword?
